https://www.pgexercises.com/questions/aggregates/count.html
1.Count the number of facilities

select count(*) from cd.facilities

2.Count the number of expensive facilities

select count(*) 
	from cd.facilities
	where guestcost >=10

3.Count the number of recommendations each member makes

select recommendedby, count(recommendedby) from cd.members
	where recommendedby is not null
	group by recommendedby
	order by recommendedby

4.List the total slots booked per facility

select facid, sum(slots) as "Total Slots" from cd.bookings
group by facid
order by facid

5.List the total slots booked per facility in a given month

select facid, sum(slots) as "Total Slots" from cd.bookings 
where starttime >= '20120901' and starttime < '20121001'
group by facid
order by sum(slots)

6.List the total slots booked per facility per month

select facid, extract(month from starttime) as month, sum(slots) as "Total Slots"
from cd.bookings where
starttime >= '20120101' and starttime < '20130101'
group by facid, month
order by facid, month;

7.Find the count of members who have made at least one booking

select count(distinct memid) from cd.bookings

8.List facilities with more than 1000 slots booked

select facid, sum(slots) as "Total Slots" from cd.bookings
group by facid
having sum(slots) > 1000
order by facid

9.Find the total revenue of each facility

select cd.facilities.name, sum(slots * 
		case
		when memid = 0 then cd.facilities.guestcost
		else cd.facilities.membercost
		end) 
		as revenue
from cd.bookings 
inner join cd.facilities 
on cd.bookings.facid = cd.facilities.facid
group by cd.facilities.name
order by revenue;

10.Find facilities with a total revenue less than 1000

select cd.facilities.name, sum(
  		case 
		when memid = 0 then slots * cd.facilities.guestcost
		else slots * membercost
		end) as revenue
from cd.bookings 
inner join cd.facilities 
on cd.bookings.facid = cd.facilities.facid
group by cd.facilities.name
having sum(case 
		when memid = 0 then slots * cd.facilities.guestcost
		else slots * membercost
		   end) < 1000
order by revenue;

11.Output the facility id that has the highest number of slots booked

select facid, sum(slots) as "Total Slots" from cd.bookings
group by facid
order by sum(slots) desc
limit 1;

12.List the total slots booked per facility per month, part 2

select facid, extract(month from starttime) as month, sum(slots) as slots
from cd.bookings
where starttime >= '20120101'and starttime < '20130101'
group by rollup(facid, month)
order by facid, month

13.List the total hours booked per named facility

select cd.facilities.facid, cd.facilities.name,
	trim(to_char(sum(cd.bookings.slots)/2.0, '9999999999999999D99')) as "Total Hours"
	from cd.bookings 
	inner join cd.facilities 
		on cd.facilities.facid = cd.bookings.facid
	group by cd.facilities.facid, cd.facilities.name
order by cd.facilities.facid;

14.List each member's first booking after September 1st 2012

select cd.members.surname, cd.members.firstname, cd.members.memid, 
min(cd.bookings.starttime) as starttime
	from cd.bookings
	inner join cd.members  on
		cd.members.memid = cd.bookings.memid
	where starttime >= '2012-09-01'
	group by cd.members.surname, cd.members.firstname, cd.members.memid
order by cd.members.memid;

15.Produce a list of member names, with each row containing the total member count

select count(*) over(), firstname, surname from cd.members
order by joindate

16.Produce a numbered list of members

select row_number() over(order by joindate), firstname, surname
from cd.members
order by joindate

17.Output the facility id that has the highest number of slots booked, again

select facid, total from (
select facid, sum(slots) total, rank() over (order by sum(slots) desc) rank
from cd.bookings
group by facid) as ranked
where rank = 1

18.Rank members by (rounded) hours used

select firstname, surname,
((sum(bks.slots)+10)/20)*10 as hours,
rank() over (order by ((sum(bks.slots)+10)/20)*10 desc) as rank
from cd.bookings bks
inner join cd.members mems
on bks.memid = mems.memid
group by mems.memid
order by rank, surname, firstname;

19.Find the top three revenue generating facilities

select name, rank from (
	select facs.name as name, rank() over (order by sum(case
	when memid = 0 then slots * facs.guestcost
	else slots * membercost
	end) desc) as rank
from cd.bookings bks
inner join cd.facilities facs
on bks.facid = facs.facid
group by facs.name
) as subq
where rank <= 3
order by rank;

20.Classify facilities by value

select name, case when class=1 then 'high'
		when class=2 then 'average'
		else 'low'
		end revenue
	from (
		select cd.facilities.name as name, ntile(3) over (order by sum(case
				when memid = 0 then slots * cd.facilities.guestcost
				else slots * membercost
			end) desc) as class
		from cd.bookings 
		inner join cd.facilities 
			on cd.bookings.facid = cd.facilities.facid
		group by cd.facilities.name
	) as subq
order by class, name; 

21.Calculate the payback time for each facility

select 	cd.facilities.name as name,
	cd.facilities.initialoutlay/((sum(case
			when memid = 0 then slots * cd.facilities.guestcost
			else slots * membercost
		end)/3) - cd.facilities.monthlymaintenance) as months
	from cd.bookings 
	inner join cd.facilities 
		on cd.bookings.facid = cd.facilities.facid
	group by cd.facilities.facid
order by name; 

22.Calculate a rolling average of total revenue

select 	dategen.date,
	(
		select sum(case
			when memid = 0 then slots * cd.facilities.guestcost
			else slots * membercost
		end) as rev

		from cd.bookings 
		inner join cd.facilities 
			on cd.bookings.facid = cd.facilities.facid
		where cd.bookings.starttime > dategen.date - interval '14 days'
			and cd.bookings.starttime < dategen.date + interval '1 day'
	)/15 as revenue
	from
	(
		select 	cast(generate_series(timestamp '2012-08-01',
			'2012-08-31','1 day') as date) as date
	)  as dategen
order by dategen.date;   
